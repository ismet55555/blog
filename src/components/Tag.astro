---
// src/components/Tag.astro
interface Props {
  txt: string
  color?: string
  url?: string // Optional URL property to make the tag clickable
}

const { txt, color, url } = Astro.props

// Base styles for the tag appearance
const baseStyles =
  'inline-flex items-center gap-1 whitespace-nowrap rounded-full px-3 py-0.5 text-sm font-medium'

// Styles to prevent link decoration when tag is clickable
const linkStyles = 'no-underline hover:no-underline !text-inherit'

function getColorStyles(color?: string) {
  if (!color) {
    return `
      border border-accentColor 
      text-accentColor
      bg-opacity-10 bg-accentColor
      dark:border-accentColor 
      dark:text-accentColor
      dark:bg-opacity-20`
  }

  const colorMap: Record<string, string> = {
    red: `
      bg-red-100 text-red-800 border border-red-500
      dark:bg-red-950 dark:text-red-200 dark:border-red-700`,
    green: `
      bg-green-100 text-green-800 border border-green-500
      dark:bg-green-950 dark:text-green-200 dark:border-green-700`,
    blue: `
      bg-blue-100 text-blue-800 border border-blue-500
      dark:bg-blue-950 dark:text-blue-200 dark:border-blue-700`,
    yellow: `
      bg-yellow-100 text-yellow-800 border border-yellow-500
      dark:bg-yellow-950 dark:text-yellow-200 dark:border-yellow-700`,
    purple: `
      bg-purple-100 text-purple-800 border border-purple-500
      dark:bg-purple-950 dark:text-purple-200 dark:border-purple-700`
  }

  return colorMap[color] || colorMap.blue
}
---

{
  url ? (
    <a href={url} class={linkStyles}>
      <span class={`${baseStyles} ${getColorStyles(color)}`}>{txt}</span>
    </a>
  ) : (
    <span class={`${baseStyles} ${getColorStyles(color)}`}>{txt}</span>
  )
}
